#!/usr/bin/env python

import os
import json
import re
import argparse
import logging

import pika
import yaml

from git_slack import slack

logger = logging.getLogger(__name__)

if __name__ == '__main__':
    # Parse command line arguments
    parser = argparse.ArgumentParser(
        description='Post Git push information from AMPQ to Slack')
    parser.add_argument('--config', metavar='file',
                        help='Configuration file')
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    # Load configuration file
    if args.config:
        with open(args.config, 'r') as f:
            config = yaml.load(f)
    else:
        config = {}

    server_host = os.environ.get('RABBITMQ_PORT_5672_TCP_ADDR', 'localhost')
    server_port = int(os.environ.get('RABBITMQ_PORT_5672_TCP_PORT', '5672'))

    connection_params = pika.ConnectionParameters(host=server_host,
                                                  port=server_port)
    connection = pika.BlockingConnection(connection_params)
    channel = connection.channel()

    channel.exchange_declare(exchange='git', type='topic')

    result = channel.queue_declare(exclusive=True)
    queue_name = result.method.queue

    channel.queue_bind(exchange='git',
                       queue=queue_name,
                       routing_key='#')

    # Run Slack WebHook connector
    if 'slack' in config and 'webhook_url' in config['slack']:
        logger.info('Using Slack WebHook URL: {}'.format(
            config['slack']['webhook_url']))
        hook = slack.SlackWebHook(config['slack']['webhook_url'])
        hook.start()
    else:
        logger.warning('No Slack URL defined! No messages will be sent.')
        logger.warning('Set "slack.webhook_url" in the configuration' +
                       ' file to enable Slack messages.')
        hook = None

    # Define Slack message options
    slack_username = None
    slack_channel = None
    if 'slack' in config:
        if 'username' in config['slack']:
            slack_username = str(config['slack']['username'])
        if 'channel' in config['slack']:
            slack_channel = str(config['slack']['channel'])

    # Callback on Git push messages
    def callback(ch, method, properties, body):
        push = json.loads(body)

        # No messages on branch delete
        if push['deleted']:
            logger.info('Push is a delete; no message generated.')
            return

        m = re.match(r'^refs/heads/(.*)$', push['ref'])
        if not m:
            logger.info('Push is not to a branch; no message generated.')
            return

        if len(push['commits']) == 0:
            logger.info('Push contains no new commits; no message generated.')
            return

        branch = m.group(1)
        repo_name = push['repository']['full_name']

        logger.info('Push received for {}, branch: {}'.format(repo_name,
                                                              branch))

        commit_count = len(push['commits'])
        commits_text = ('one new commit' if commit_count == 1 else
                        '{} new commits'.format(commit_count))
        pretext = '[{}:{}] {}'.format(repo_name, branch, commits_text)
        commits = []
        for commit in push.get('commits', []):
            abbrev = commit['id'][:7]
            commits.append('{}: {} - {}'.format(abbrev, commit['message'],
                                                commit['author']['name']))
        attachment = slack.Attachment(fallback=pretext,
                                      pretext=pretext+':',
                                      color='#4183c4',
                                      text='\n'.join(commits))
        message = slack.Message(attachments=[attachment],
                                username=slack_username,
                                channel=slack_channel)

        if hook is not None:
            hook.enqueue(message)

    channel.basic_consume(callback,
                          queue=queue_name,
                          no_ack=True)

    logger.info("Waiting for Git push messages...")
    try:
        channel.start_consuming()
    except KeyboardInterrupt:
        pass
    finally:
        if hook is not None:
            logger.info('Stopping Slack WebHook connector...')
            hook.stop()

        logger.info('Closing AMPQ connection...')
        connection.close()

    logger.info('Done.')
